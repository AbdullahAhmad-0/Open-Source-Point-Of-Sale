text: \n\n        frm_{shn} = Frame(self.detailFrame, bg=self.colorList[2], width=self.dFbF_w - 10, height=y_space)\n        frm_{shn}.pack(fill=BOTH, expand=True)\n        lbl_{shn} = Label(frm_{shn}, text='{Name}', font=self.formset_mainF, bg=self.colorList[7], fg=self.colorList[8], highlightbackground=self.colorList[11], highlightthickness=2, highlightcolor=self.colorList[12])\n        lbl_{shn}.place(x=10, y=1)\n        ent_{shn} = Entry(frm_{shn}, textvariable=self.var_{shn}, border=0, font=self.formset_mainF, bg=self.colorList[9], fg=self.colorList[10], highlightbackground=self.colorList[11], highlightthickness=2, highlightcolor=self.colorList[12])\n        ent_{shn}.place(x=self.dF_ent_x, y=1, width=self.dF_ent_w, height=self.formset_fieldH)
date: \n\n        frm_{shn} = Frame(self.detailFrame, bg=self.colorList[2], width=self.dFbF_w - 10, height=y_space)\n        frm_{shn}.pack(fill=BOTH, expand=True)\n        lbl_{shn} = Label(frm_{shn}, text='{Name}', font=self.formset_mainF, bg=self.colorList[7], fg=self.colorList[8], highlightbackground=self.colorList[11], highlightthickness=2, highlightcolor=self.colorList[12])\n        lbl_{shn}.place(x=10, y=1)\n        ent_{shn} = DateEntry(frm_{shn}, textvariable=self.var_{shn}, border=0, font=self.formset_mainF, bg=self.colorList[9], fg=self.colorList[10], highlightbackground=self.colorList[11], highlightthickness=2, highlightcolor=self.colorList[12], justify=CENTER, date_pattern='dd-mm-y')\n        ent_{shn}.place(x=self.dF_ent_x, y=1, width=self.dF_ent_w - 10, height=self.formset_fieldH)\n        def cls_{shn}():\n            self.var_{shn}.set("")\n            ent_{shn}.update()\n        btn_{shn} = Button(frm_{shn}, command=cls_{shn}, justify=LEFT, text='-', font=(self.formset_mainF, 13), bd=0, cursor='hand2', bg=self.colorList[5], activeforeground=self.colorList[22], activebackground=self.colorList[21], fg=self.colorList[6])\n        btn_{shn}.place(x=self.dF_ent_x + self.dF_ent_w - 10, y=1, width=10, height=self.formset_fieldH)
combo: \n\n        frm_{shn} = Frame(self.detailFrame, bg=self.colorList[2], width=self.dFbF_w - 10, height=y_space)\n        frm_{shn}.pack(fill=BOTH, expand=True)\n        lbl_{shn} = Label(frm_{shn}, text='{Name}', font=self.formset_mainF, bg=self.colorList[7], fg=self.colorList[8], highlightbackground=self.colorList[11], highlightthickness=2, highlightcolor=self.colorList[12])\n        lbl_{shn}.place(x=10, y=1)\n        cmb_{shn}_list = ['']\n        cmb_{shn} = AutocompleteCombobox(frm_{shn}, values=cmb_{shn}_list, textvariable=self.var_{shn}, font=self.formset_mainF, background=self.colorList[9], foreground=self.colorList[10])\n        cmb_{shn}.set_completion_list(cmb_{shn}_list)\n        cmb_{shn}.tk.eval(f'[ttk::combobox::PopdownWindow %s].f.l configure -background {self.colorList[13]}' % cmb_{shn})\n        cmb_{shn}.place(x=self.dF_ent_x, y=1, width=self.dF_ent_w, height=self.formset_fieldH)\n        cmb_{shn}.current(0)
no: \n\n        frm_{shn} = Frame(self.detailFrame, bg=self.colorList[2], width=self.dFbF_w - 10, height=y_space)\n        frm_{shn}.pack(fill=BOTH, expand=True)\n        lbl_{shn} = Label(frm_{shn}, text='{Name}', font=self.formset_mainF, bg=self.colorList[7], fg=self.colorList[8], highlightbackground=self.colorList[11], highlightthickness=2, highlightcolor=self.colorList[12])\n        lbl_{shn}.place(x=10, y=1)\n        ent_{shn} = Entry(frm_{shn}, textvariable=self.var_{shn}, border=0, font=self.formset_mainF, bg=self.colorList[9], fg=self.colorList[10], highlightbackground=self.colorList[11], highlightthickness=2, highlightcolor=self.colorList[12])\n        ent_{shn}.place(x=self.dF_ent_x, y=1, width=self.dF_ent_w, height=self.formset_fieldH)\n        ent_{shn}.bind("<KeyRelease>", lambda e, x=self.var_{shn}: self.convertToNo(e, x))
attach: \n\n        frm_{shn} = Frame(self.detailFrame, bg=self.colorList[2], width=self.dFbF_w - 10, height=y_space)\n        frm_{shn}.pack(fill=BOTH, expand=True)\n        lbl_{shn} = Label(frm_{shn}, text='{Name}', font=self.formset_mainF, bg=self.colorList[7], fg=self.colorList[8], highlightbackground=self.colorList[11], highlightthickness=2, highlightcolor=self.colorList[12])\n        lbl_{shn}.place(x=10, y=1)\n        ent_att = Entry(frm_{shn}, textvariable=self.var_{shn}3, border=0, font=self.formset_mainF, bg=self.colorList[9], fg=self.colorList[10], highlightbackground=self.colorList[11], highlightthickness=2, highlightcolor=self.colorList[12])\n        ent_att.place(x=self.dF_ent_x, y=1, width=self.dF_ent_w - 120, height=self.formset_fieldH)\n        self.var_{shn}3.set('Not Attached')\n        def attach():\n            try:\n                ff = filedialog.askopenfilename(parent=self.root, title='Select Document')\n                if ff != '':\n                    self.var_{shn}1.set(ff)\n                    abcd = self.convertToBinaryData(ff)\n                    self.var_{shn}2.set(abcd.decode('cp437'))\n                    self.var_{shn}3.set('Attached')\n            except Exception as e: messagebox.showerror('Error', e, parent=self.root)\n        btn_att = Button(frm_{shn}, text='Attach', command=attach, justify=LEFT, font=(self.formset_mainF, 13), bd=1, cursor='hand2', bg=self.colorList[5], activeforeground=self.colorList[22], activebackground=self.colorList[21], fg=self.colorList[6])\n        btn_att.place(x=self.dF_ent_x+self.dF_ent_w-120, y=1, width=60, height=self.formset_fieldH)\n        def open_doc():\n            try:\n                x = random.randint(1, 500000)\n                x = str(x)\n                z = self.var_{shn}1.get()\n                z = os.path.basename(z)\n                loc = 'Temp\\Temp' + x + z\n                a = self.var_{shn}2.get()\n                a = a.encode('cp437')\n                if self.var_{shn}2.get() != '':\n                    with open(loc, 'wb') as file:\n                        file.write(a)\n                    os.startfile(loc)\n            except Exception as e: messagebox.showerror('Error', e, parent=self.root)\n        btn_open = Button(frm_{shn}, text='Open', command=open_doc, justify=LEFT, font=(self.formset_mainF, 13), bd=1, cursor='hand2', bg=self.colorList[5], activeforeground=self.colorList[22], activebackground=self.colorList[21], fg=self.colorList[6])\n        btn_open.place(x=self.dF_ent_x+self.dF_ent_w-60, y=1, width=59, height=self.formset_fieldH)
dText: \n\n        frm_{shn} = Frame(self.detailFrame, bg=self.colorList[2], width=self.dFbF_w - 10, height=y_space)\n        frm_{shn}.pack(fill=BOTH, expand=True)\n        lbl_{shn} = Label(frm_{shn}, text='{Name}', font=self.formset_mainF, bg=self.colorList[7], fg=self.colorList[8], highlightbackground=self.colorList[11], highlightthickness=2, highlightcolor=self.colorList[12])\n        lbl_{shn}.place(x=10, y=1)\n        ent_{shn} = Entry(frm_{shn}, textvariable=self.var_{shn}, border=0, font=self.formset_mainF, disabledbackground=self.colorList[14], disabledforeground=self.colorList[15], state=DISABLED, bg=self.colorList[9], fg=self.colorList[10], highlightbackground=self.colorList[11], highlightthickness=2, highlightcolor=self.colorList[12])\n        ent_{shn}.place(x=self.dF_ent_x, y=1, width=self.dF_ent_w, height=self.formset_fieldH)
listT: \n\n        frm_{shn} = Frame(self.detailFrame, bg=self.colorList[2], width=self.dFbF_w - 10, height=(y_space * 5) + 10)\n        frm_{shn}.pack(fill=BOTH, expand=True)\n        \n        self.var_{shn}_temp = StringVar()\n        lbl_{shn} = Label(frm_{shn}, text='{Name}', font=self.formset_mainF, bg=self.colorList[7], fg=self.colorList[8], highlightbackground=self.colorList[11], highlightthickness=2, highlightcolor=self.colorList[12])\n        lbl_{shn}.place(x=10, y=1)\n        ent_{shn} = Entry(frm_{shn}, textvariable=self.var_{shn}_temp, border=0, font=self.formset_mainF, bg=self.colorList[9], fg=self.colorList[10], highlightbackground=self.colorList[11], highlightthickness=2, highlightcolor=self.colorList[12])\n        ent_{shn}.place(x=self.dF_ent_x, y=1, width=self.dF_ent_w - 100, height=self.formset_fieldH)\n        \n        btn_{shn} = Button(frm_{shn}, command=lambda : self.list_Add(lis_{shn}, self.var_{shn}_temp, self.var_{shn}), justify=LEFT, text='Add', font=(self.formset_mainF, 13), bd=1, cursor='hand2', bg=self.colorList[5], activeforeground=self.colorList[22], activebackground=self.colorList[21], fg=self.colorList[6])\n        btn_{shn}.place(x=self.dF_ent_x + self.dF_ent_w - 99, y=1, width=50, height=self.formset_fieldH)\n        btn_{shn} = Button(frm_{shn}, command=lambda : self.list_Del(lis_{shn}, self.var_{shn}), justify=LEFT, text='Delete', font=(self.formset_mainF, 13), bd=1, cursor='hand2', bg=self.colorList[5], activeforeground=self.colorList[22], activebackground=self.colorList[21], fg=self.colorList[6])\n        btn_{shn}.place(x=self.dF_ent_x + self.dF_ent_w - 49, y=1, width=50, height=self.formset_fieldH)\n        \n        lis_{shn} = Listbox(frm_{shn}, border=0, font=self.formset_mainF, bg=self.colorList[9], fg=self.colorList[10], highlightbackground=self.colorList[11], highlightthickness=2, highlightcolor=self.colorList[12])\n        lis_{shn}.place(x=self.dF_ent_x, y=1 + y_space, width=self.dF_ent_w - 10, height=55 + (y_space * 2))\n        scl_{shn} = Scrollbar(frm_{shn})\n        scl_{shn}.place(x=self.dF_ent_x + self.dF_ent_w - 10, y=1 + y_space, width=10, height=55 + (y_space * 2))\n        lis_{shn}.config(yscrollcommand=scl_{shn}.set)\n        scl_{shn}.config(command=lis_{shn}.yview)\n        sclx_{shn} = Scrollbar(frm_{shn}, orient=HORIZONTAL)\n        sclx_{shn}.place(x=self.dF_ent_x, y=1 + y_space + 55 + (y_space * 2), width=self.dF_ent_w, height=10)\n        lis_{shn}.config(xscrollcommand=sclx_{shn}.set)\n        sclx_{shn}.config(command=lis_{shn}.xview)\n        \n        # Bind the function to the StringVar object\n        self.var_{shn}.trace("w", lambda name, index, mode: self.bindList(lis_{shn}, self.var_{shn}_temp, self.var_{shn}))
listC: \n\n        frm_{shn} = Frame(self.detailFrame, bg=self.colorList[2], width=self.dFbF_w - 10, height=(y_space * 5) + 10)\n        frm_{shn}.pack(fill=BOTH, expand=True)\n        \n        self.var_{shn}_temp = StringVar()\n        lbl_{shn} = Label(frm_{shn}, text='{Name}', font=self.formset_mainF, bg=self.colorList[7], fg=self.colorList[8], highlightbackground=self.colorList[11], highlightthickness=2, highlightcolor=self.colorList[12])\n        lbl_{shn}.place(x=10, y=1)\n        cmb_{shn}_list = ['Yes', 'No']\n        lbl_{shn} = Label(frm_{shn}, text='{Name}', font=self.formset_mainF, bg=self.colorList[7], fg=self.colorList[8], highlightbackground=self.colorList[11], highlightthickness=2, highlightcolor=self.colorList[12])\n        lbl_{shn}.place(x=10, y=1)\n        cmb_{shn}_list = cmb_{shn}_list\n        cmb_{shn} = AutocompleteCombobox(frm_{shn}, values=cmb_{shn}_list, textvariable=self.var_{shn}_temp, font=self.formset_mainF, background=self.colorList[9], foreground=self.colorList[10])\n        cmb_{shn}.set_completion_list(cmb_{shn}_list)\n        cmb_{shn}.tk.eval(f'[ttk::combobox::PopdownWindow %s].f.l configure -background {self.colorList[13]}' % cmb_{shn})\n        cmb_{shn}.place(x=self.dF_ent_x, y=1, width=self.dF_ent_w - 100, height=self.formset_fieldH)\n        cmb_{shn}.current(0)\n        \n        btn_{shn} = Button(frm_{shn}, command=lambda : self.list_Add(lis_{shn}, self.var_{shn}_temp, self.var_{shn}), justify=LEFT, text='Add', font=(self.formset_mainF, 13), bd=1, cursor='hand2', bg=self.colorList[5], activeforeground=self.colorList[22], activebackground=self.colorList[21], fg=self.colorList[6])\n        btn_{shn}.place(x=self.dF_ent_x + self.dF_ent_w - 99, y=1, width=50, height=self.formset_fieldH)\n        btn_{shn} = Button(frm_{shn}, command=lambda : self.list_Del(lis_{shn}, self.var_{shn}), justify=LEFT, text='Delete', font=(self.formset_mainF, 13), bd=1, cursor='hand2', bg=self.colorList[5], activeforeground=self.colorList[22], activebackground=self.colorList[21], fg=self.colorList[6])\n        btn_{shn}.place(x=self.dF_ent_x + self.dF_ent_w - 49, y=1, width=50, height=self.formset_fieldH)\n        \n        lis_{shn} = Listbox(frm_{shn}, border=0, font=self.formset_mainF, bg=self.colorList[9], fg=self.colorList[10], highlightbackground=self.colorList[11], highlightthickness=2, highlightcolor=self.colorList[12])\n        lis_{shn}.place(x=self.dF_ent_x, y=1 + y_space, width=self.dF_ent_w - 10, height=55 + (y_space * 2))\n        scl_{shn} = Scrollbar(frm_{shn})\n        scl_{shn}.place(x=self.dF_ent_x + self.dF_ent_w - 10, y=1 + y_space, width=10, height=55 + (y_space * 2))\n        lis_{shn}.config(yscrollcommand=scl_{shn}.set)\n        scl_{shn}.config(command=lis_{shn}.yview)\n        sclx_{shn} = Scrollbar(frm_{shn}, orient=HORIZONTAL)\n        sclx_{shn}.place(x=self.dF_ent_x, y=1 + y_space + 55 + (y_space * 2), width=self.dF_ent_w, height=10)\n        lis_{shn}.config(xscrollcommand=sclx_{shn}.set)\n        sclx_{shn}.config(command=lis_{shn}.xview)\n        \n        # Bind the function to the StringVar object\n        self.var_{shn}.trace("w", lambda name, index, mode: self.bindList(lis_{shn}, self.var_{shn}_temp, self.var_{shn}))
listTD: \n\n        frm_{shn} = Frame(self.detailFrame, bg=self.colorList[2], width=self.dFbF_w - 10, height=(y_space * 5) + 10)\n        frm_{shn}.pack(fill=BOTH, expand=True)\n        \n        self.var_{shn}_temp = StringVar()\n        lbl_{shn} = Label(frm_{shn}, text='{Name}', font=self.formset_mainF, bg=self.colorList[7], fg=self.colorList[8], highlightbackground=self.colorList[11], highlightthickness=2, highlightcolor=self.colorList[12])\n        lbl_{shn}.place(x=10, y=1)\n        ent_{shn} = Entry(frm_{shn}, textvariable=self.var_{shn}_temp, border=0, font=self.formset_mainF, bg=self.colorList[9], fg=self.colorList[10], highlightbackground=self.colorList[11], highlightthickness=2, highlightcolor=self.colorList[12])\n        ent_{shn}.place(x=self.dF_ent_x, y=1, width=self.dF_ent_w - 100, height=self.formset_fieldH)\n        \n        btn_{shn} = Button(frm_{shn}, command=lambda : self.list_nd_Add(lis_{shn}, self.var_{shn}_temp, self.var_{shn}), justify=LEFT, text='Add', font=(self.formset_mainF, 13), bd=1, cursor='hand2', bg=self.colorList[5], activeforeground=self.colorList[22], activebackground=self.colorList[21], fg=self.colorList[6])\n        btn_{shn}.place(x=self.dF_ent_x + self.dF_ent_w - 99, y=1, width=50, height=self.formset_fieldH)\n        btn_{shn} = Button(frm_{shn}, command=lambda : self.list_Del(lis_{shn}, self.var_{shn}), justify=LEFT, text='Delete', font=(self.formset_mainF, 13), bd=1, cursor='hand2', bg=self.colorList[5], activeforeground=self.colorList[22], activebackground=self.colorList[21], fg=self.colorList[6])\n        btn_{shn}.place(x=self.dF_ent_x + self.dF_ent_w - 49, y=1, width=50, height=self.formset_fieldH)\n        \n        lis_{shn} = Listbox(frm_{shn}, border=0, font=self.formset_mainF, bg=self.colorList[9], fg=self.colorList[10], highlightbackground=self.colorList[11], highlightthickness=2, highlightcolor=self.colorList[12])\n        lis_{shn}.place(x=self.dF_ent_x, y=1 + y_space, width=self.dF_ent_w - 10, height=55 + (y_space * 2))\n        scl_{shn} = Scrollbar(frm_{shn})\n        scl_{shn}.place(x=self.dF_ent_x + self.dF_ent_w - 10, y=1 + y_space, width=10, height=55 + (y_space * 2))\n        lis_{shn}.config(yscrollcommand=scl_{shn}.set)\n        scl_{shn}.config(command=lis_{shn}.yview)\n        sclx_{shn} = Scrollbar(frm_{shn}, orient=HORIZONTAL)\n        sclx_{shn}.place(x=self.dF_ent_x, y=1 + y_space + 55 + (y_space * 2), width=self.dF_ent_w, height=10)\n        lis_{shn}.config(xscrollcommand=sclx_{shn}.set)\n        sclx_{shn}.config(command=lis_{shn}.xview)\n        \n        # Bind the function to the StringVar object\n        self.var_{shn}.trace("w", lambda name, index, mode: self.bindList(lis_{shn}, self.var_{shn}_temp, self.var_{shn}))
listCD: \n\n        frm_{shn} = Frame(self.detailFrame, bg=self.colorList[2], width=self.dFbF_w - 10, height=(y_space * 5) + 10)\n        frm_{shn}.pack(fill=BOTH, expand=True)\n        \n        self.var_{shn}_temp = StringVar()\n        lbl_{shn} = Label(frm_{shn}, text='{Name}', font=self.formset_mainF, bg=self.colorList[7], fg=self.colorList[8], highlightbackground=self.colorList[11], highlightthickness=2, highlightcolor=self.colorList[12])\n        lbl_{shn}.place(x=10, y=1)\n        cmb_{shn}_list = ['Yes', 'No']\n        lbl_{shn} = Label(frm_{shn}, text='{Name}', font=self.formset_mainF, bg=self.colorList[7], fg=self.colorList[8], highlightbackground=self.colorList[11], highlightthickness=2, highlightcolor=self.colorList[12])\n        lbl_{shn}.place(x=10, y=1)\n        cmb_{shn}_list = cmb_{shn}_list\n        cmb_{shn} = AutocompleteCombobox(frm_{shn}, values=cmb_{shn}_list, textvariable=self.var_{shn}_temp, font=self.formset_mainF, background=self.colorList[9], foreground=self.colorList[10])\n        cmb_{shn}.set_completion_list(cmb_{shn}_list)\n        cmb_{shn}.tk.eval(f'[ttk::combobox::PopdownWindow %s].f.l configure -background {self.colorList[13]}' % cmb_{shn})\n        cmb_{shn}.place(x=self.dF_ent_x, y=1, width=self.dF_ent_w - 100, height=self.formset_fieldH)\n        cmb_{shn}.current(0)\n        \n        btn_{shn} = Button(frm_{shn}, command=lambda : self.list_ndc_Add(lis_{shn}, self.var_{shn}_temp, self.var_{shn}, cmb_{shn}_list, cmb_{shn}), justify=LEFT, text='Add', font=(self.formset_mainF, 13), bd=1, cursor='hand2', bg=self.colorList[5], activeforeground=self.colorList[22], activebackground=self.colorList[21], fg=self.colorList[6])\n        btn_{shn}.place(x=self.dF_ent_x + self.dF_ent_w - 99, y=1, width=50, height=self.formset_fieldH)\n        btn_{shn} = Button(frm_{shn}, command=lambda : self.list_ndc_Del(lis_{shn}, self.var_{shn}, self.var_{shn}_temp, cmb_{shn}_list, cmb_{shn}), justify=LEFT, text='Delete', font=(self.formset_mainF, 13), bd=1, cursor='hand2', bg=self.colorList[5], activeforeground=self.colorList[22], activebackground=self.colorList[21], fg=self.colorList[6])\n        btn_{shn}.place(x=self.dF_ent_x + self.dF_ent_w - 49, y=1, width=50, height=self.formset_fieldH)\n        \n        lis_{shn} = Listbox(frm_{shn}, border=0, font=self.formset_mainF, bg=self.colorList[9], fg=self.colorList[10], highlightbackground=self.colorList[11], highlightthickness=2, highlightcolor=self.colorList[12])\n        lis_{shn}.place(x=self.dF_ent_x, y=1 + y_space, width=self.dF_ent_w - 10, height=55 + (y_space * 2))\n        scl_{shn} = Scrollbar(frm_{shn})\n        scl_{shn}.place(x=self.dF_ent_x + self.dF_ent_w - 10, y=1 + y_space, width=10, height=55 + (y_space * 2))\n        lis_{shn}.config(yscrollcommand=scl_{shn}.set)\n        scl_{shn}.config(command=lis_{shn}.yview)\n        sclx_{shn} = Scrollbar(frm_{shn}, orient=HORIZONTAL)\n        sclx_{shn}.place(x=self.dF_ent_x, y=1 + y_space + 55 + (y_space * 2), width=self.dF_ent_w, height=10)\n        lis_{shn}.config(xscrollcommand=sclx_{shn}.set)\n        sclx_{shn}.config(command=lis_{shn}.xview)\n        \n        # Bind the function to the StringVar object\n        self.var_{shn}.trace("w", lambda name, index, mode: self.bindList_ndc(lis_{shn}, self.var_{shn}_temp, self.var_{shn}, cmb_{shn}_list, cmb_{shn}))
